
clc 
close all
clear
  
%% Note: runing this code, the solution optimization can be multiple, all the possible solutions are stored in "solution" in the workspace after the optimization is done.
% different computer configurations will give different optimization
% results. 

% in this optimization code, we also set the substrate thickness as an unknown to increase the freedom of searching. 


%%
rng default % For reproducibility
ms=MultiStart('UseParallel',true,'Display','iter');

% define optimization initial points. 
Num_x1=4; 
Num_x2=2;
Num_x3=2;
Num_x4=2;
Num_x5=2;
Num_x6=2;
Num_x7=2;


% x1 toi x6 the initial points of Fourier coefficients of modulation function.

x1=linspace(2,4,Num_x1);   
x2=linspace(-0.2,0.2,Num_x2);
x3=linspace(-0.1,0.1,Num_x3);
x4=linspace(0.03,0.1,Num_x4);
x5=linspace(-0.1,0.1,Num_x5);
x6=linspace(0.03,0.1,Num_x6);
x7=linspace(0.5,0.7,Num_x7); % this is for substrate thickness

x0=[1,0.2,0.01,0.001,0.1,0.001,0.6]; % initial point, it must be defined. but the value is not important

ptmatrix =(combvec(x1, x2,x3,x4,x5,x6,x7))'; % construct all the initial points
tpoints = CustomStartPointSet(ptmatrix);
    
%% basic parameters
f0=1e9;
freq=3*f0;

eps_0=8.854e-12; % permittivity of freespace
mue_0=4*pi*10^-7; % permeability of free space
c=1/sqrt(eps_0*mue_0);

D_m=c/freq/(sqrt(2)/2); % periodicity of modulation
beta_m=2*pi/D_m;

objective_function=@fun;

%% variable bounds
lb = [];
ub = [];

%% linear constraints
A = [];
b = [];
Aeq = [];
beq = [];

%% nonlinear constraints
nonlincon = @nlcons;


%%
problem = createOptimProblem('fmincon','x0',x0,...
    'objective',objective_function,'lb',[],'ub',[],'nonlcon',nonlincon);
% [x,fval,ef,output,lambda] = fmincon(objective_function,x0,A,b,Aeq,beq,lb,ub,nonlincon);

% options = optimoptions('fmincon','FiniteDifferenceStepSize',1e-16);


[x,fval,exitflag,output,solutions] = run(ms,problem,tpoints);


[c,ceq]=nlcons(x);

% show final objective
disp(['Final Objective: ' num2str(objective_function(x))])
% print solution
disp('Solution')
disp(['x1 = ' num2str(x(1))])
disp(['x2 = ' num2str(x(2))])
disp(['x3 = ' num2str(x(3))])
disp(['x4 = ' num2str(x(4))])
disp(['x5 = ' num2str(x(5))])
disp(['x6 = ' num2str(x(6))])
disp(['x7 = ' num2str(x(7))])

function z=fun(x)

unitF=1e-12;

%% basic parameters
N=20; % 2N+1 harmonics in total

eps_0=8.854e-12; % permittivity of freespace
mue_0=4*pi*10^-7; % permeability of free space
eps_d=3*(1-1i*0.000); % permittivity of the substrate
d=x(7)*1e-3; % thickness of substrate

f0=1e9;

freq=3*f0; % used for define the peiodicity

c=1/sqrt(eps_0*mue_0);

th_1=45; th_2=0; % define two incident angles
alpha=1+0.0499999999999; % modulation freqeuncy=0.05w_0, we write 0.049999999999 instead of 0.05 in order to avoid sigularity in the optimizaiton.

D_m=c/freq/(alpha*sind(th_1)-sind(th_2)); % modulation spatial periodicity

beta_m=2*pi/D_m; % modulation wavenumber

w_0=2*pi*freq;  % incident angular frequency

w_m=0.0499999999999*w_0; % modulation frequency

Ms=zeros(2*N+1,2); % for data storage

th=[th_1,th_2]; % incident from differnt angles

for kk=1:2

theta_i=th(kk);

k_0=w_0*sqrt(eps_0*mue_0); % free space wavevector
k_0z=k_0*sind(theta_i); % transverse component of wavevector


%% build matrix

% define wave admittance of free space
Z0=zeros(2*N+1,2*N+1); % define a matrix that is have 2*N+1 rows and 2*N+1 columns

for rr=1:2*N+1
    for cc=1:2*N+1
       
        w_n=(w_0+(cc-N-1)*w_m); % frquency harmonic at cc column
        k_0zn=k_0z+(cc-N-1)*beta_m; % transverse wavevector of n harmonic at cc column
        k_0n=w_n*sqrt(mue_0*eps_0); % wavevector of n harmonics at cc column
%         k_0xn=sqrt(k_0n^2-k_0zn^2); % normal wavevector of n harmonics at cc column
               
     if abs(k_0zn)<=abs(k_0n) %propatating wave condition
      k_0xn=sqrt(k_0n^2-k_0zn^2); % normal wavevector of n harmonics at cc column
     else
      k_0xn=-sqrt(k_0n^2-k_0zn^2); % normal wavevector of n harmonics at cc column   
     end     
        if cc==rr
%           Z0(rr,cc)=k_0xn/eps_0/w_n;  % for TM mode
          Z0(rr,cc)=mue_0*w_n/k_0xn;  % for TE mode
        end 
        
    end
    
end 

Y0=pinv(Z0);  % admittance matrix of free space impedance



% define wave admittance matrix of grounded substrate

Yd=zeros(2*N+1,2*N+1);

for rr=1:2*N+1
    for cc=1:2*N+1

       w_n=(w_0+(cc-N-1)*w_m); % frquency harmonic at cc column
        k_dzn=k_0z+(cc-N-1)*beta_m; % transverse wavevector of n harmonic at cc column
        k_dn=w_n*sqrt(mue_0*eps_0*eps_d); % wavevector of n harmonics at cc column
%         k_dxn=sqrt(k_dn^2-k_dzn^2); % normal wavevector of n harmonics at cc column

     if abs(k_dzn)<=abs(k_dn) %propatating wave condition
      k_dxn=sqrt(k_dn^2-k_dzn^2); % normal wavevector of n harmonics at cc column
     else
      k_dxn=sqrt(k_dn^2-k_dzn^2); % here, k_dxn minus and plus have no difference because Zd and gamma have the same sign. 
     end
     
        gamma_n=1i*k_dxn;
%         Zd_n=k_dxn/eps_d/eps_0/w_n;  % characteristic impedance substrate for TM mode
        Zd_n=mue_0*w_n/k_dxn;  % characteristic impedance substrate for TE mode

    if cc==rr
      Yd(rr,cc)=1/(Zd_n*tanh(gamma_n*d));  % for TM or TE mode
    end

    end
end 


%% define admittance matrix of space-time capacitance

Yc=zeros(2*N+1,2*N+1);
for rr=1:2*N+1     %row
      w_n=w_0+(rr-N-1)*w_m; % frquency harmonic at cc column  
    for cc=1:2*N+1 % colummn        
    if rr==cc
        Yc(rr,rr)=1i*x(1)*w_n*unitF;
    elseif rr-cc==1
        Yc(rr,cc)=1i*x(2)*w_n*unitF;
    elseif rr-cc==-1
        Yc(rr,cc)=1i*x(2)*w_n*unitF;      
    elseif rr-cc==2
        Yc(rr,cc)=1i*(x(3)+1i*x(4))*w_n*unitF;
    elseif rr-cc==-2
        Yc(rr,cc)=1i*(x(3)-1i*x(4))*w_n*unitF;
    elseif rr-cc==3
        Yc(rr,cc)=1i*(x(5)+1i*x(6))*w_n*unitF;
    elseif rr-cc==-3
        Yc(rr,cc)=1i*(x(5)-1i*x(6))*w_n*unitF;
    else
        Yc(rr,cc)=0;
    end 
    
    end
end

Yt=Yc+Yd;  % total admittance of the structure

Gamma=pinv(Yt+Y0)*(Y0-Yt); % reflection matrix for TE polarization

Ms(:,kk)=Gamma(:,N+1);

end


z=abs(abs(Ms(N,2))-0)+abs(abs(Ms(N+1,2))-0)+abs(abs(Ms(N-1,1))-0)+abs(abs(Ms(N,1))-0)+sum(abs(Ms(N+8:2*N+1,2)))+sum(abs(Ms(1:N-4,2))); % define objective function, the last two terms are to supperess evanescent modes
end


%% define optmization constraits for each paramters
function [c,ceq] = nlcons(x)
c4=-x(7)+0.5; %constraints for substrate thickness
c5=x(7)-1; %constraints for substrate thickness
c7=-(x(1)-2*abs(x(2))-2*sqrt(x(3)^2+x(4)^2)-2*sqrt(x(5)^2+x(6)^2)); %constraints for modulation function, ensure C(z.t) is always positive.
c=[ c7 c4 c5];
ceq = [];
end
